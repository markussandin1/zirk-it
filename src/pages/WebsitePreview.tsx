import { useEffect, useState } from 'react'
import { useParams, useNavigate, useSearchParams, Link } from 'react-router-dom'
import { ArrowLeft } from 'lucide-react'
import { supabase } from '../lib/supabase'
import { Website } from '../types'
import WebsiteRenderer from '../components/Website/WebsiteRenderer'

export default function WebsitePreview() {
  const { slug } = useParams<{ slug: string }>()
  const navigate = useNavigate()
  const [searchParams] = useSearchParams()
  const fromChatParam = searchParams.get('from') === 'chat'
  const fromChatStorage = localStorage.getItem('wasInChat') === 'true'
  const fromChat = fromChatParam || fromChatStorage
  
  console.log('Debug navigation:', {
    fromChatParam,
    fromChatStorage,
    fromChat,
    searchParam: searchParams.get('from'),
    localStorage: localStorage.getItem('wasInChat')
  })
  const [website, setWebsite] = useState<Website | null>(null)
  const [loading, setLoading] = useState(true)
  const [error, setError] = useState<string>('')

  useEffect(() => {
    if (slug) {
      fetchWebsite(slug)
    }
  }, [slug])

  const fetchWebsite = async (websiteSlug: string) => {
    try {
      const { data, error } = await supabase
        .from('pages')
        .select('*')
        .eq('slug', websiteSlug)
        .single()

      if (error) throw error
      
      setWebsite(data)
    } catch (err: any) {
      setError('Website not found')
      console.error('Error fetching website:', err)
    } finally {
      setLoading(false)
    }
  }

  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-indigo-600"></div>
          <p className="mt-4 text-gray-600">Loading website...</p>
        </div>
      </div>
    )
  }

  if (error || !website) {
    return (
      <div className="min-h-screen bg-gray-50 flex items-center justify-center">
        <div className="text-center">
          <h1 className="text-2xl font-bold text-gray-900 mb-4">Website Not Found</h1>
          <p className="text-gray-600 mb-6">{error}</p>
          <Link
            to="/"
            className="inline-flex items-center px-4 py-2 bg-indigo-600 text-white rounded-lg hover:bg-indigo-700"
          >
            <ArrowLeft className="h-4 w-4 mr-2" />
            Back to Home
          </Link>
        </div>
      </div>
    )
  }


  return (
    <div className="min-h-screen bg-white">
      {/* Navigation */}
      <nav className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between items-center h-16">
            <div className="flex items-center">
              <button
                onClick={() => {
                  if (fromChat) {
                    localStorage.removeItem('wasInChat')
                    navigate('/?chat=true')
                  } else {
                    navigate('/')
                  }
                }}
                className="flex items-center text-gray-600 hover:text-gray-900"
              >
                <ArrowLeft className="h-4 w-4 mr-2" />
                {fromChat ? "Back to Chat" : "Back to Generator"}
              </button>
            </div>
            <div className="text-sm text-gray-500">
              Preview Mode - Generated by Zirk AI
            </div>
          </div>
        </div>
      </nav>

      {/* Website Content using Template System */}
      <WebsiteRenderer website={website} isEditable={false} />
    </div>
  )
}